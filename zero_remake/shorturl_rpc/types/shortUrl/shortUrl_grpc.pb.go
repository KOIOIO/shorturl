// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.9.0
// source: shortUrl.proto

package shortUrl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShortUrl_GenerateShortUrl_FullMethodName = "/shortUrl.ShortUrl/GenerateShortUrl"
	ShortUrl_HandleShort_FullMethodName      = "/shortUrl.ShortUrl/HandleShort"
)

// ShortUrlClient is the client API for ShortUrl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortUrlClient interface {
	GenerateShortUrl(ctx context.Context, in *GenerateShortUrlRequest, opts ...grpc.CallOption) (*GenerateShortUrlResponse, error)
	HandleShort(ctx context.Context, in *HandleShortRequest, opts ...grpc.CallOption) (*HandleShortResponse, error)
}

type shortUrlClient struct {
	cc grpc.ClientConnInterface
}

func NewShortUrlClient(cc grpc.ClientConnInterface) ShortUrlClient {
	return &shortUrlClient{cc}
}

func (c *shortUrlClient) GenerateShortUrl(ctx context.Context, in *GenerateShortUrlRequest, opts ...grpc.CallOption) (*GenerateShortUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateShortUrlResponse)
	err := c.cc.Invoke(ctx, ShortUrl_GenerateShortUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortUrlClient) HandleShort(ctx context.Context, in *HandleShortRequest, opts ...grpc.CallOption) (*HandleShortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleShortResponse)
	err := c.cc.Invoke(ctx, ShortUrl_HandleShort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortUrlServer is the server API for ShortUrl service.
// All implementations must embed UnimplementedShortUrlServer
// for forward compatibility.
type ShortUrlServer interface {
	GenerateShortUrl(context.Context, *GenerateShortUrlRequest) (*GenerateShortUrlResponse, error)
	HandleShort(context.Context, *HandleShortRequest) (*HandleShortResponse, error)
	mustEmbedUnimplementedShortUrlServer()
}

// UnimplementedShortUrlServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortUrlServer struct{}

func (UnimplementedShortUrlServer) GenerateShortUrl(context.Context, *GenerateShortUrlRequest) (*GenerateShortUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateShortUrl not implemented")
}
func (UnimplementedShortUrlServer) HandleShort(context.Context, *HandleShortRequest) (*HandleShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleShort not implemented")
}
func (UnimplementedShortUrlServer) mustEmbedUnimplementedShortUrlServer() {}
func (UnimplementedShortUrlServer) testEmbeddedByValue()                  {}

// UnsafeShortUrlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortUrlServer will
// result in compilation errors.
type UnsafeShortUrlServer interface {
	mustEmbedUnimplementedShortUrlServer()
}

func RegisterShortUrlServer(s grpc.ServiceRegistrar, srv ShortUrlServer) {
	// If the following call pancis, it indicates UnimplementedShortUrlServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShortUrl_ServiceDesc, srv)
}

func _ShortUrl_GenerateShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).GenerateShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortUrl_GenerateShortUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).GenerateShortUrl(ctx, req.(*GenerateShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortUrl_HandleShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).HandleShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortUrl_HandleShort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).HandleShort(ctx, req.(*HandleShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortUrl_ServiceDesc is the grpc.ServiceDesc for ShortUrl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortUrl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortUrl.ShortUrl",
	HandlerType: (*ShortUrlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateShortUrl",
			Handler:    _ShortUrl_GenerateShortUrl_Handler,
		},
		{
			MethodName: "HandleShort",
			Handler:    _ShortUrl_HandleShort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shortUrl.proto",
}
